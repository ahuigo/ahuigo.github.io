<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>Ahuigo 的笔记</title>
<link href="https://ahuigo.github.io/b/atom.xml" rel="self" type="application/atom+xml"/>
<updated>2022-08-19T21:25:19Z</updated>
<subtitle>Ahuigo's notes</subtitle>
<entry xml:base="https://ahuigo.github.io">
<title>Vue 自定义指令</title>
<link href="/b/ia/vue/vue-project" rel="alternate" type="text/html"/>
<updated>2022-08-19T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Vue 自定义指令
类似 v-model 和 v-show, 举个聚焦输入框的例子，如下：

    &lt;input v-focus&gt;

全局

    // 注册一个全局自定义指令 `v-focu</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>nginx debug</title>
<link href="/b/ginx/nginx-debug-log" rel="alternate" type="text/html"/>
<updated>2022-08-19T00:00:00Z</updated>
<summary/>
<published>2022-08-19T00:00:00Z</published>
<content># Preface

# log
## log scope

	main, http, server, location

## log type

	access_log /var/log/ngin</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>极端天气</title>
<link href="/b/ews/weather" rel="alternate" type="text/html"/>
<updated>2022-08-19T00:00:00Z</updated>
<summary/>
<published>2022-08-19T00:00:00Z</published>
<content># 极端天气

没错，但是，过去几千年，温度是温和变化的，但是近100年，温度是极速增长的：https://www.encyclopedie-environnement.org/zh/climat-z</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tcp/ip 协议</title>
<link href="/b/et/net-tcpip" rel="alternate" type="text/html"/>
<updated>2022-08-19T00:00:00Z</updated>
<summary/>
<published>2011-11-11T00:00:00Z</published>
<content># 互联网协议栈
分为链路层(link), 网络层(Network), 传输层(Transport), 应用层(Application)

应用层
	DHCP DHCPv6 DNS FTP Gophe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 简介</title>
<link href="/b/c/c-var" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2021-05-14T00:00:00Z</published>
<content># todo
linux c
http://blog.xiayf.cn/slides/tlpi-1/index.html#/2

# Variable

## Int

	signed int i;
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c time</title>
<link href="/b/c/c-time" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2021-05-14T00:00:00Z</published>
<content>
# Time
	time_t time();//unix time
	localtime()
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c string</title>
<link href="/b/c/c-str" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2021-05-14T00:00:00Z</published>
<content># String
## Define String
Const String Array

	char *str = "Hello";//只有两个字符'He'，不包含'\0' (const char </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 之进程</title>
<link href="/b/c/c-process" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2021-05-14T00:00:00Z</published>
<content># Preface
本文总结下进程那些事儿

# PCB 进程控制块
linux 中每个进程都是由进程控制块(PCB) 控制的，PCB是一个task_struct 结构体。

- 进程id。系统中每个</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c lib 库</title>
<link href="/b/c/c-lib" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2021-05-14T00:00:00Z</published>
<content># Preface
在[c 编译](/p/c-compile) 中我提到了c 的标准库，c标准库包括: header(.h 文件)头文件，和lib（.c）库文件。
大多数库函数在libc 中, 本笔记</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>c-io-buffer</title>
<link href="/b/c/c-io-buffer" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Preface
在标准I/O库中提供缓冲的主要目的就是减少系统函数read和write的调用，从而能够减少系统CPU时间。标准I/O库的缓冲主要分为3种：全缓冲、行缓冲和不缓冲。

    全缓冲</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c names and expression</title>
<link href="/b/c/c-expr" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2021-05-14T00:00:00Z</published>
<content># Operator
!高于*/%,高于+-,高于~,高于&gt;、&lt;、&gt;=、&lt;=,高 于==、!=,高于&amp;&amp;,高于||
前缀自增运算符(Prefix Increment Operator)
后缀自增运 算</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python virtualenv</title>
<link href="/b/py/py-test-virtualenv" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># python env
本文介绍数种python 虚拟环境
- virtualenv 提供了 Python 虚拟环境的隔离，但是命令复杂，目录的管理也比较混乱，
- VirtualEnvWrappe</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-pkg-setuptool</title>
<link href="/b/py/py-pkg-setuptool" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># 前言
本文参考： https://packaging.python.org/tutorials/packaging-projects/

setuptools 与 disutils
1. dist</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-import</title>
<link href="/b/py/py-import" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface

## package vs module
import pkg/modules 时，引入的object type 是`module`，但它们不同点是
1. `pkg/__init</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 文件处理</title>
<link href="/b/py/py-file" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Directory
建议用Path 代替

## file property
os

### os home

    os.getenv('HOME')

    from os.path im</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux os</title>
<link href="/b/c/linux-os" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2019-06-15T00:00:00Z</published>
<content># Check os Version
check os:

    lsb_release -a

CISC 复杂指令集

    X86架构: intel/amd/via
        i386:</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>经典排序算法的实现</title>
<link href="/b/algorithm/sort" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2013-09-26T00:00:00Z</published>
<content># 经典排序算法实现
常规的几种排序算法, 参考[维基sort](http://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95)
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>shell 表达式</title>
<link href="/b/c/shell-expr" rel="alternate" type="text/html"/>
<updated>2021-04-24T00:00:00Z</updated>
<summary/>
<published>2021-04-24T00:00:00Z</published>
<content># shell 表达式

# Loop

    for i in `seq 1 5`;
    for i in {1..5};

## loop break continue

    for i</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>python 的list/tuple 笔记</title>
<link href="/b/py/py-var-list" rel="alternate" type="text/html"/>
<updated>2021-04-22T00:00:00Z</updated>
<summary/>
<published>2018-03-03T00:00:00Z</published>
<content># list and tuple
因为tuple 是增加删除元素的不可变的list(数据可以变)，所以代码更安全。
如果可能，能用tuple代替list就尽量用tuple。

	list = [1,2</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 字符处理</title>
<link href="/b/py/py-str" rel="alternate" type="text/html"/>
<updated>2021-04-24T00:00:00Z</updated>
<summary/>
<published>2017-08-09T00:00:00Z</published>
<content># Python 字符处理
- serialize
见/py/py-serial.md

# String
same as js:

	print "a\nb" ;# The character he</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Python 的语法</title>
<link href="/b/py/py-expr" rel="alternate" type="text/html"/>
<updated>2021-04-22T00:00:00Z</updated>
<summary/>
<published>2018-03-01T00:00:00Z</published>
<content># 多条件compare
多条件比较

    &gt;&gt;&gt; 5&lt;i&lt;100
    &gt;&gt;&gt; 1 &lt; 3 &gt;= 3 &gt; 1==1 &lt;100
    True

# 条件和循环

## 多层循环平铺 prod</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c socket 编程</title>
<link href="/b/c/c-socket" rel="alternate" type="text/html"/>
<updated>2021-04-22T00:00:00Z</updated>
<summary/>
<published>2021-04-22T00:00:00Z</published>
<content># Preface
Socket 可以有很多概念：

1. 在TCP/IP 中,"IP + TCP或UDP端口号" 唯一标识网络通讯中的*进程*，"IP+端口号"就被称为socket
2. 在TCP </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>net-ssl-tool</title>
<link href="/b/net/ssl-openssl" rel="alternate" type="text/html"/>
<updated>2021-04-17T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># mkcert
mkcert 是一个签发本地证书的工具，用于开发环境，最大特色是可以签发 localhost 的证书 (阮一峰博客看到的)
https://blog.filippo.io/mkcer</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>SSL Certificate Authority(CA)</title>
<link href="/b/net/ssl-ca" rel="alternate" type="text/html"/>
<updated>2021-04-17T00:00:00Z</updated>
<summary/>
<published>2021-04-17T00:00:00Z</published>
<content># 证书概念
## 证书级别
http://www.ruanyifeng.com/blog/2016/08/migrate-from-http-to-https.html

## SNI(SSL/TL</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>SSH SERVER 的配置</title>
<link href="/b/net/ssh-server" rel="alternate" type="text/html"/>
<updated>2021-04-17T00:00:00Z</updated>
<summary/>
<published>2019-06-23T00:00:00Z</published>
<content># SSH SERVER
## install and start
### linux
OpenSSH Installations under CentOS Linux

	# To install </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Secure Shell(ssh)</title>
<link href="/b/net/ssh-proto" rel="alternate" type="text/html"/>
<updated>2021-04-17T00:00:00Z</updated>
<summary/>
<published>2021-04-17T00:00:00Z</published>
<content># Preface
本文介绍协议，具体工具请参考[/p/net-ssh-tool](/p/net-ssh-tool)
Secure Shell 是建立在传输层和应用层基础上的安全协议(它属于应用层)，</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Golang Interfaces</title>
<link href="/b/go/16.go-interface" rel="alternate" type="text/html"/>
<updated>2021-04-22T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># Interfaces
Interface：
1. Interface 可以用来模拟泛型，但是是运行时模拟，没有编译时快
1. method 没有 public protecte..., 如果要被其</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>curl manual</title>
<link href="/b/c/ops-curl" rel="alternate" type="text/html"/>
<updated>2021-04-17T00:00:00Z</updated>
<summary/>
<published>2021-04-17T00:00:00Z</published>
<content># curlt to python/node/go...
curl 转换器: https://curl.trillworks.com/

# Usage

	-F,--form
	-D- Dump t</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac-sip</title>
<link href="/b/mac/mac-sip" rel="alternate" type="text/html"/>
<updated>2021-04-15T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># mac 文件保护临时关闭
/usr/include 目录是不可写的，可临时打开 
1. 关机重启，按 `command + r` 键进入 recovery 模式，在工具中选择命令行，键入 `csr</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>go-test</title>
<link href="/b/go/go-test" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># unittest 
Go has a lightweight test framework composed of the go test command and the testing pack</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux c 信号</title>
<link href="/b/c/c-signal" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2021-05-14T00:00:00Z</published>
<content># Preface

信号处理的一个经典场景:
1. shell 启动一个进程
2. 用户按下ctrl+c 键盘产生一个硬件中断
3. 如果cpu 正在执行这个进程的代码, 则暂停这个进程，cpu 从</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>js-var</title>
<link href="/b/ria/js-var" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface
基本类型：Undefined、Null、Boolean、Number和String
复杂类型：由基本类型构成

# var
## "use strict";
es6 默认用 use</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Git 命令大全</title>
<link href="/b/git/git-" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Git 配置

## ConfigFile
1. /etc/gitconfig #git config --system
2. ~/.gitconfig 	#git config --global</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>linux 下的Fork 与 Exec</title>
<link href="/b/c/shell-redirect-fork2exec" rel="alternate" type="text/html"/>
<updated>2021-04-15T00:00:00Z</updated>
<summary/>
<published>2021-04-15T00:00:00Z</published>
<content># Preface
多进程的的内容包括进程控制, 进程通信, 进程本身的结构.

# 标准管道输入输出

	#with stdout(cmd get double stdout); stdout pi</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>Shell IO及文件操作</title>
<link href="/b/c/shell-io-file" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Shell IO及文件操作

# file

## hexdump
	hexdump file

## od
od 支持更丰富的格式化输出

	od -tx1 -tc -Ax file

	-t </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-os</title>
<link href="/b/py/py-os" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2018-10-04T00:00:00Z</published>
<content># Preface

# os 
## platform

    from sys import platform
	if platform == 'Darwin':  # 如果是Mac OS X
</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>mac user manager</title>
<link href="/b/mac/mac-user" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Preface
mac下没有adduser, 那如何在mac中添加用户/组?

# rename home directory
https://support.apple.com/en-us/HT</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>tool</title>
<link href="/b/c/ops-user" rel="alternate" type="text/html"/>
<updated>2021-05-14T00:00:00Z</updated>
<summary/>
<published>2018-09-27T00:00:00Z</published>
<content># tool
last #显示最后登录者
who #显示当前登录者
w：谁登录进来了
id：用户/组身份信息

# su

    su -c 'whoami' - root
    /bin/su </content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>vim-motion</title>
<link href="/b/vim/vim-motion" rel="alternate" type="text/html"/>
<updated>2021-04-02T00:00:00Z</updated>
<summary/>
<published>2021-04-02T00:00:00Z</published>
<content># Motion, Movement
Movement 移动光标、字符，Vim 最核心的功能操作

vim 下的光标移动

    按字符移动 hjkl
    按单词移动 
        小单词:</content>
</entry><entry xml:base="https://ahuigo.github.io">
<title>py-debug</title>
<link href="/b/py/py-debug" rel="alternate" type="text/html"/>
<updated>2021-03-30T00:00:00Z</updated>
<summary/>
<published>2018-09-28T00:00:00Z</published>
<content># Preface
1. exception
2. 调试包括print, assert, 
3. 使用logging/sentry/q(强烈推荐)
4. pdb/ipdb
3. perf 性能
1. </content>
</entry></feed>